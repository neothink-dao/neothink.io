{"version":3,"sources":["../src/utils/middleware.ts","../src/utils/security-logger.ts","../src/utils/securityLogging.ts","../src/utils/csrf.ts","../src/utils/rateLimit.ts","../src/utils/securityTestingHelpers.ts","../src/components/SecurityDashboard.tsx","../src/hooks/useSecurityProvider.tsx","../src/components/AuthForm.tsx","../src/components/SignInForm.tsx","../src/lib/supabase/client.ts","../src/components/SignUpForm.tsx","../src/components/ForgotPasswordForm.tsx","../src/components/UpdatePasswordForm.tsx","../src/components/ErrorPage.tsx","../src/index.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createPlatformClient } from '@neothink/database';\nimport type { SecurityEvent, SecurityEventSeverity, SecurityEventType, PlatformSlug } from '@neothink/database';\nimport crypto from 'crypto';\nimport { logSecurityEvent } from './security-logger';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { validateCsrfToken } from './csrf';\n\n// Static asset paths that should skip middleware\nconst staticAssetPaths = [\n  '/_next/static/',\n  '/favicon.ico',\n  '/robots.txt',\n  '/sitemap.xml',\n];\n\n// Rate limit configuration by endpoint type\nconst rateLimitConfig = {\n  default: { limit: 100, window: 60 }, // 100 requests per minute\n  auth: { limit: 10, window: 60 }, // 10 auth requests per minute\n  api: { limit: 50, window: 60 }, // 50 API requests per minute\n  admin: { limit: 30, window: 60 }, // 30 admin requests per minute\n};\n\n/**\n * Extracts platform slug from hostname\n */\nexport function getPlatformFromHost(host?: string | null): PlatformSlug | null {\n  if (!host) return null;\n  const subdomain = host.split('.')[0];\n  if (['hub', 'ascenders', 'immortals', 'neothinkers'].includes(subdomain)) {\n    return subdomain as PlatformSlug;\n  }\n  return null;\n}\n\n/**\n * Checks for suspicious patterns in the request\n */\nfunction isSuspiciousRequest(req: NextRequest): boolean {\n  const path = req.nextUrl.pathname;\n  const query = req.nextUrl.search;\n  \n  // Check for SQL injection attempts\n  const sqlInjectionPatterns = [\n    /union\\s+select/i,\n    /or\\s+1=1/i,\n    /';\\s*--/i,\n    /'\\s*or\\s*'1'='1/i\n  ];\n  \n  // Check for XSS attempts\n  const xssPatterns = [\n    /<script\\b[^>]*>/i,\n    /javascript:/i,\n    /on\\w+\\s*=/i\n  ];\n  \n  // Check for path traversal\n  const pathTraversalPatterns = [\n    /\\.\\.\\//,\n    /\\.\\.\\\\/, \n    /%2e%2e\\//i\n  ];\n\n  const testString = `${path}${query}`;\n  return [\n    ...sqlInjectionPatterns,\n    ...xssPatterns,\n    ...pathTraversalPatterns\n  ].some(pattern => pattern.test(testString));\n}\n\n/**\n * Checks rate limits for the request\n */\nasync function checkRateLimit(\n  req: NextRequest,\n  platformSlug: PlatformSlug\n): Promise<boolean> {\n  const supabase = createPlatformClient(platformSlug);\n  const path = req.nextUrl.pathname;\n  const clientIp = req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n  \n  // Determine rate limit based on endpoint\n  let config = rateLimitConfig.default;\n  if (path.startsWith('/api/auth')) {\n    config = rateLimitConfig.auth;\n  } else if (path.startsWith('/api/admin')) {\n    config = rateLimitConfig.admin;\n  } else if (path.startsWith('/api/')) {\n    config = rateLimitConfig.api;\n  }\n  \n  const identifier = `${platformSlug}:${clientIp}:${path}`;\n  const windowStart = new Date(Date.now() - config.window * 1000).toISOString();\n  \n  const { data: requests } = await supabase\n    .from('rate_limits')\n    .select('count')\n    .eq('identifier', identifier)\n    .gte('window_start', windowStart)\n    .single();\n    \n  return requests ? requests.count >= config.limit : false;\n}\n\n/**\n * Sets comprehensive security headers for all responses\n */\nexport function setSecurityHeaders(req: NextRequest, res: Response): Response {\n  const nonce = crypto.randomBytes(16).toString('base64');\n  \n  const headers = new Headers(res.headers);\n  headers.set('X-Frame-Options', 'DENY');\n  headers.set('X-Content-Type-Options', 'nosniff');\n  headers.set('X-XSS-Protection', '1; mode=block');\n  headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  headers.set(\n    'Content-Security-Policy',\n    `default-src 'self'; script-src 'self' 'nonce-${nonce}' 'strict-dynamic'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; object-src 'none';`\n  );\n  headers.set(\n    'Strict-Transport-Security',\n    'max-age=31536000; includeSubDomains; preload'\n  );\n\n  return new Response(res.body, {\n    status: res.status,\n    statusText: res.statusText,\n    headers\n  });\n}\n\nexport default async function middleware(req: NextRequest) {\n  try {\n    const platformSlug = getPlatformFromHost(req.headers.get('host'));\n    if (!platformSlug) {\n      return new Response('Not Found', { status: 404 });\n    }\n\n    const supabase = createPlatformClient(platformSlug);\n\n    // Check rate limits\n    const isRateLimited = await checkRateLimit(req, platformSlug);\n    if (isRateLimited) {\n      await logSecurityEvent(supabase, {\n        event: 'RATE_LIMIT_EXCEEDED' as SecurityEventType,\n        severity: 'medium' as SecurityEventSeverity,\n        platform_slug: platformSlug,\n        user_id: undefined,\n        ip_address: req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || '',\n        request_path: req.nextUrl.pathname,\n        request_method: req.method,\n        request_headers: Object.fromEntries(req.headers),\n        context: {},\n        details: {},\n        suspicious_activity: true\n      });\n      return new Response('Too Many Requests', { status: 429 });\n    }\n\n    // Check for suspicious activity\n    if (isSuspiciousRequest(req)) {\n      await logSecurityEvent(supabase, {\n        event: 'SUSPICIOUS_ACTIVITY' as SecurityEventType,\n        severity: 'high' as SecurityEventSeverity,\n        platform_slug: platformSlug,\n        user_id: undefined,\n        ip_address: req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || '',\n        request_path: req.nextUrl.pathname,\n        request_method: req.method,\n        request_headers: Object.fromEntries(req.headers),\n        context: {},\n        details: { path: req.nextUrl.pathname, headers: Object.fromEntries(req.headers) },\n        suspicious_activity: true\n      });\n      return new Response('Bad Request', { status: 400 });\n    }\n\n    // Validate CSRF token for mutations\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      const csrfResult = await validateCsrfToken(req);\n      if (!csrfResult) {\n        await logSecurityEvent(supabase, {\n          event: 'CSRF_FAILURE' as SecurityEventType,\n          severity: 'high' as SecurityEventSeverity,\n          platform_slug: platformSlug,\n          user_id: undefined,\n          ip_address: req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || '',\n          request_path: req.nextUrl.pathname,\n          request_method: req.method,\n          request_headers: Object.fromEntries(req.headers),\n          context: {},\n          details: { message: 'Invalid CSRF Token' },\n          suspicious_activity: true\n        });\n        return new Response('Invalid CSRF Token', { status: 403 });\n      }\n    }\n\n    // Add security headers\n    const response = await fetch(req);\n    return setSecurityHeaders(req, response);\n  } catch (error) {\n    console.error('Middleware error:', error);\n    return new Response('Internal Server Error', { status: 500 });\n  }\n}\n\nexport async function handleRateLimit(\n  req: NextRequest,\n  res: NextResponse,\n  platform: PlatformSlug,\n  supabase: SupabaseClient\n) {\n  const rateLimited = await checkRateLimit(req, platform);\n  const rateLimitResponse = rateLimited ? new Response('Too Many Requests', { status: 429 }) : null;\n  \n  if (rateLimited) {\n    // Log security event\n    await logSecurityEvent(supabase, {\n      event: 'RATE_LIMIT_EXCEEDED' as SecurityEventType,\n      severity: 'medium' as SecurityEventSeverity,\n      platform_slug: platform,\n      user_id: undefined,\n      ip_address: req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || '',\n      request_path: req.nextUrl.pathname,\n      request_method: req.method,\n      request_headers: Object.fromEntries(req.headers),\n      context: {},\n      details: {},\n      suspicious_activity: true\n    });\n    \n    return rateLimitResponse;\n  }\n  \n  return null;\n}\n\nexport function ensureCsrfToken(\n  req: NextRequest,\n  platform: PlatformSlug,\n  csrfOptions: any = {},\n  supabase: SupabaseClient\n) {\n  const valid = validateCsrfToken(req);\n  \n  if (!valid) {\n    // Log security event\n    logSecurityEvent(supabase, {\n      event: 'CSRF_FAILURE' as SecurityEventType,\n      severity: 'high' as SecurityEventSeverity,\n      platform_slug: platform,\n      user_id: undefined,\n      ip_address: req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || '',\n      request_path: req.nextUrl.pathname,\n      request_method: req.method,\n      request_headers: Object.fromEntries(req.headers),\n      context: {},\n      details: { message: 'Invalid CSRF Token' },\n      suspicious_activity: true\n    }).catch(error => console.error('Failed to log CSRF security event:', error));\n    \n    return false;\n  }\n  \n  return true;\n}","import { SupabaseClient } from '@supabase/supabase-js';\nimport type { SecurityEvent, SecurityEventSeverity, SecurityEventType, PlatformSlug } from '@neothink/database';\nimport { NextRequest } from 'next/server';\nimport { createPlatformClient } from '@neothink/database';\n\n/**\n * Generate a UUID v4 (simple fallback, for demo; use a robust lib in prod)\n */\nfunction generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * Logs a security event to the security_events table\n */\nexport const logSecurityEvent = async (\n  supabaseAdmin: SupabaseClient,\n  event: SecurityEvent\n): Promise<void> => {\n  try {\n    const { error } = await supabaseAdmin.from('security_events').insert(event);\n    if (error) {\n      console.error('Error logging security event:', error);\n    }\n  } catch (error) {\n    console.error('Error logging security event:', error);\n  }\n};\n\n/**\n * Helper function to create a security event (matches SecurityEvent interface)\n * @param platform_slug - platform identifier\n * @param type - event type (string literal)\n * @param severity - event severity\n * @param userId - user id\n * @param context - additional event context\n * @returns SecurityEvent (with id and timestamp)\n */\nexport function createSecurityEvent(\n  platform_slug: PlatformSlug,\n  type: SecurityEventType,\n  severity: SecurityEventSeverity,\n  userId: string,\n  context: Record<string, any> = {}\n): SecurityEvent {\n  return {\n    id: generateUUID(),\n    type,\n    severity,\n    userId,\n    timestamp: new Date().toISOString(),\n    context: {\n      ...context,\n      platform_slug\n    }\n  };\n}\n\n/**\n * Helper function to create a suspicious activity event (matches SecurityEvent interface)\n * @param platform_slug - platform identifier\n * @param userId - user id\n * @param context - additional event context\n * @returns SecurityEvent (with id and timestamp)\n */\nexport function createSuspiciousActivityEvent(\n  platform_slug: PlatformSlug,\n  userId: string,\n  context: Record<string, any> = {}\n): SecurityEvent {\n  return {\n    id: generateUUID(),\n    type: 'unauthorized_access', // Use a valid SecurityEventType string literal\n    severity: 'high',\n    userId,\n    timestamp: new Date().toISOString(),\n    context: {\n      ...context,\n      platform_slug,\n      suspicious_activity: true\n    }\n  };\n}\n\n/**\n * Helper function to log authentication events\n */\nexport async function logAuthEvent(\n  supabase: SupabaseClient,\n  platform_slug: PlatformSlug,\n  event: SecurityEventType,\n  user_id: string,\n  context: Record<string, any> = {},\n  details?: Record<string, any>\n) {\n  await logSecurityEvent(\n    supabase,\n    createSecurityEvent(platform_slug, event, 'low', user_id, { ...context, details })\n  );\n}\n\n/**\n * Helper function to log detailed security events\n */\nexport async function logDetailedSecurityEvent(\n  supabase: SupabaseClient,\n  platform_slug: PlatformSlug,\n  event: SecurityEventType,\n  user_id: string,\n  severity: SecurityEventSeverity,\n  context: Record<string, any> = {},\n  details: Record<string, any> = {},\n  suspicious_activity = false,\n  req?: NextRequest\n) {\n  const requestInfo = req\n    ? {\n        ip_address: req.headers.get('x-forwarded-for') || '',\n        request_path: req.nextUrl.pathname,\n        request_method: req.method,\n        request_headers: Object.fromEntries(req.headers.entries()),\n      }\n    : {};\n  try {\n    await logSecurityEvent(supabase, {\n      ...createSecurityEvent(platform_slug, event, severity, user_id, { ...context, ...requestInfo, details, suspicious_activity }),\n    });\n  } catch (error) {\n    // Log to console if database logging fails\n    console.error('Failed to log security event:', {\n      error,\n      event: {\n        ...createSecurityEvent(platform_slug, event, severity, user_id, { ...context, ...requestInfo, details, suspicious_activity }),\n      },\n    });\n  }\n}\n\n/**\n * Log a security event using an options object (canonical shape)\n */\nexport async function logSecurityEventFromOptions({\n  supabase,\n  platform_slug,\n  event,\n  severity,\n  user_id,\n  context = {},\n  details = {},\n  suspicious_activity = false,\n  req\n}: {\n  supabase: SupabaseClient;\n  platform_slug: PlatformSlug;\n  event: SecurityEventType;\n  severity: SecurityEventSeverity;\n  user_id: string;\n  context?: Record<string, any>;\n  details?: Record<string, any>;\n  suspicious_activity?: boolean;\n  req?: NextRequest;\n}) {\n  const requestInfo = req\n    ? {\n        ip_address: req.headers.get('x-forwarded-for') || '',\n        request_path: req.nextUrl.pathname,\n        request_method: req.method,\n        request_headers: Object.fromEntries(req.headers.entries()),\n      }\n    : {};\n  try {\n    await logSecurityEvent(supabase, {\n      ...createSecurityEvent(platform_slug, event, severity, user_id, { ...context, ...requestInfo, details, suspicious_activity }),\n    });\n  } catch (error) {\n    // Log to console if database logging fails\n    console.error('Failed to log security event:', {\n      error,\n      event: {\n        ...createSecurityEvent(platform_slug, event, severity, user_id, { ...context, ...requestInfo, details, suspicious_activity }),\n      },\n    });\n  }\n}\n\n// --- DX/UX/Production-Readiness Enhancements ---\n// 1. All helpers now return valid SecurityEvent objects\n// 2. All event types are string literals matching the type union\n// 3. UUID and timestamp are generated for every event\n// 4. JSDoc and parameter docs added\n// 5. If you need custom fields, extend SecurityEvent in your own type","import { SupabaseClient } from '@supabase/supabase-js';\nimport type { SecurityEvent, SecurityEventSeverity, SecurityLog, PlatformSlug } from '@neothink/database';\n\n/**\n * Predefined security event types for consistency\n */\nexport const SecurityEventTypes = {\n  LOGIN_SUCCESS: 'login_success',\n  LOGIN_FAILURE: 'login_failure',\n  RATE_LIMIT_EXCEEDED: 'rate_limit_exceeded',\n  SUSPICIOUS_ACTIVITY: 'suspicious_activity',\n  ACCESS_DENIED: 'access_denied',\n  CSRF_VALIDATION_FAILURE: 'csrf_validation_failure',\n  SQL_INJECTION_ATTEMPT: 'sql_injection_attempt',\n  XSS_ATTEMPT: 'xss_attempt',\n  PATH_TRAVERSAL_ATTEMPT: 'path_traversal_attempt',\n  ADMIN_ACTION: 'admin_action',\n  PASSWORD_CHANGE: 'password_change',\n  ACCOUNT_LOCKOUT: 'account_lockout',\n  ACCOUNT_RECOVERY: 'account_recovery',\n  SESSION_HIJACKING_ATTEMPT: 'session_hijacking_attempt',\n  INVALID_AUTH_ATTEMPT: 'invalid_auth_attempt',\n  CSRF_TOKEN_INVALID: 'csrf_token_invalid',\n  SUSPICIOUS_IP_DETECTED: 'suspicious_ip_detected',\n  CSRF_TOKEN_MISMATCH: 'csrf_token_mismatch',\n  CSRF_TOKEN_EXPIRED: 'csrf_token_expired',\n  CSRF_TOKEN_USER_AGENT_MISMATCH: 'csrf_token_user_agent_mismatch',\n} as const;\n\nexport type SecurityEventType = typeof SecurityEventTypes[keyof typeof SecurityEventTypes];\n\n/**\n * Log a security event to the Supabase database\n * \n * @param supabase Supabase client instance\n * @param event Security event to log\n * @returns Success status\n */\nexport async function logSecurityEvent(\n  supabase: SupabaseClient,\n  event: SecurityEvent\n): Promise<boolean> {\n  try {\n    const { error } = await supabase\n      .from('security_events')\n      .insert({\n        ...event,\n        created_at: new Date().toISOString()\n      });\n    \n    if (error) {\n      console.error('Failed to log security event:', error);\n      return false;\n    }\n    \n    // For critical events, consider additional actions (like alerting)\n    if (event.severity === 'critical') {\n      // TODO: Add integration with alert systems\n      console.error('CRITICAL SECURITY EVENT:', event);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error logging security event:', error);\n    return false;\n  }\n}","import { SupabaseClient } from '@supabase/supabase-js';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { SecurityEventTypes, SecurityEventType, logSecurityEvent } from './securityLogging';\nimport { createPlatformClient } from '@neothink/database';\nimport crypto from 'crypto';\n\n/**\n * Methods that require CSRF protection\n */\nconst CSRF_METHODS = ['POST', 'PUT', 'PATCH', 'DELETE'];\n\n/**\n * Configuration for CSRF protection\n */\ninterface CsrfConfig {\n  tokenTtlHours: number;\n  headerName: string;\n  cookieName: string;\n  cookieOptions: {\n    httpOnly: boolean;\n    secure: boolean;\n    sameSite: 'strict' | 'lax' | 'none';\n    path: string;\n    domain?: string;\n  };\n}\n\nconst DEFAULT_CONFIG: Required<CsrfConfig> = {\n  tokenTtlHours: 24,\n  headerName: 'X-CSRF-Token',\n  cookieName: 'csrf-token',\n  cookieOptions: {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict',\n    path: '/',\n    domain: process.env.COOKIE_DOMAIN\n  }\n};\n\n// CSRF token validity duration in seconds (1 hour)\nconst CSRF_TOKEN_VALIDITY = 3600;\n\n/**\n * Generates a cryptographically secure random token using SHA-256\n */\nasync function generateToken(): Promise<string> {\n  const buffer = crypto.randomBytes(32);\n  const timestamp = Date.now().toString();\n  const hash = crypto.createHash('sha256');\n  \n  // Combine random bytes with timestamp for uniqueness\n  hash.update(buffer);\n  hash.update(timestamp);\n  \n  return hash.digest('base64');\n}\n\n/**\n * Stores a CSRF token in the database with additional metadata\n */\nasync function storeToken(\n  supabase: SupabaseClient,\n  token: string,\n  userId: string | undefined,\n  config: CsrfConfig = DEFAULT_CONFIG\n): Promise<void> {\n  const { tokenTtlHours = DEFAULT_CONFIG.tokenTtlHours } = config;\n  \n  const expiresAt = new Date();\n  expiresAt.setHours(expiresAt.getHours() + tokenTtlHours);\n  \n  const tokenHash = crypto.createHash('sha256').update(token).digest('base64');\n  \n  const { error } = await supabase\n    .from('csrf_tokens')\n    .insert({\n      token_hash: tokenHash,\n      user_id: userId,\n      expires_at: expiresAt.toISOString(),\n      user_agent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      created_at: new Date().toISOString()\n    });\n    \n  if (error) {\n    console.error('Failed to store CSRF token:', error);\n    throw new Error('Failed to store CSRF token');\n  }\n}\n\n/**\n * Sets CSRF token cookie with secure options\n */\nfunction setCsrfCookie(\n  res: NextResponse,\n  token: string,\n  config: CsrfConfig = DEFAULT_CONFIG\n): void {\n  const { cookieName, cookieOptions } = config;\n  \n  // Set cookie with secure options\n  res.cookies.set(cookieName, token, {\n    ...cookieOptions,\n    expires: new Date(Date.now() + CSRF_TOKEN_VALIDITY * 1000)\n  });\n}\n\n/**\n * Validates a CSRF token from a request using double submit cookie pattern\n */\nasync function validateToken(\n  req: NextRequest,\n  supabase: SupabaseClient,\n  config: CsrfConfig = DEFAULT_CONFIG\n): Promise<boolean> {\n  const { headerName, cookieName } = config;\n  \n  const headerToken = req.headers.get(headerName);\n  const cookieToken = req.cookies.get(cookieName)?.value;\n  \n  // Check if both tokens exist and match (double submit cookie validation)\n  if (!headerToken || !cookieToken || headerToken !== cookieToken) {\n    await logCsrfViolation(supabase, req, {\n      type: SecurityEventTypes.CSRF_TOKEN_MISMATCH as SecurityEventType,\n      severity: 'high',\n      context: {\n        path: req.nextUrl.pathname,\n        method: req.method,\n      },\n      details: {\n        hasHeaderToken: !!headerToken,\n        hasCookieToken: !!cookieToken,\n        tokensMatch: headerToken === cookieToken\n      },\n    });\n    return false;\n  }\n  \n  // Validate token in database\n  const tokenHash = crypto.createHash('sha256').update(headerToken).digest('base64');\n  \n  const { data, error } = await supabase\n    .from('csrf_tokens')\n    .select('expires_at, user_agent')\n    .eq('token_hash', tokenHash)\n    .single();\n    \n  if (error || !data) {\n    await logCsrfViolation(supabase, req, {\n      type: SecurityEventTypes.CSRF_TOKEN_INVALID as SecurityEventType,\n      severity: 'high',\n      context: {\n        path: req.nextUrl.pathname,\n        method: req.method,\n      },\n      details: {\n        error: error?.message,\n      },\n    });\n    return false;\n  }\n  \n  // Check expiration\n  if (new Date(data.expires_at) < new Date()) {\n    await logCsrfViolation(supabase, req, {\n      type: SecurityEventTypes.CSRF_TOKEN_EXPIRED as SecurityEventType,\n      severity: 'medium',\n      context: {\n        path: req.nextUrl.pathname,\n        method: req.method,\n      },\n      details: {\n        expires_at: data.expires_at,\n      },\n    });\n    return false;\n  }\n  \n  // Validate user agent hasn't changed (additional security check)\n  const currentUserAgent = req.headers.get('user-agent');\n  if (data.user_agent && currentUserAgent !== data.user_agent) {\n    await logCsrfViolation(supabase, req, {\n      type: SecurityEventTypes.CSRF_TOKEN_USER_AGENT_MISMATCH as SecurityEventType,\n      severity: 'high',\n      context: {\n        path: req.nextUrl.pathname,\n        method: req.method,\n      },\n      details: {\n        storedUserAgent: data.user_agent,\n        currentUserAgent,\n      },\n    });\n    return false;\n  }\n  \n  // Clean up used token\n  await supabase\n    .from('csrf_tokens')\n    .delete()\n    .eq('token_hash', tokenHash);\n    \n  return true;\n}\n\n/**\n * Checks if a request requires CSRF validation\n */\nfunction requiresCsrfCheck(req: NextRequest): boolean {\n  return CSRF_METHODS.includes(req.method);\n}\n\n/**\n * Logs CSRF violation attempts\n */\ntype LogCsrfViolationDetails = {\n  type: SecurityEventType;\n  severity: string;\n  context: Record<string, any>;\n  details?: Record<string, any>;\n};\n\nasync function logCsrfViolation(\n  supabase: any,\n  req: any,\n  details: LogCsrfViolationDetails\n): Promise<void> {\n  // Only pass required properties to logSecurityEvent, let it handle timestamps and IDs internally\n  await logSecurityEvent(supabase, {\n    type: details.type,\n    severity: details.severity,\n    context: details.context,\n  } as any);\n}\n\n// Generate a CSRF token\nexport function generateCsrfToken(): string {\n  return crypto.randomBytes(32).toString('hex');\n}\n\n// Validate CSRF token\nexport async function validateCsrfToken(request: NextRequest): Promise<boolean> {\n  // Only validate POST/PUT/DELETE/PATCH requests\n  if (!['POST', 'PUT', 'DELETE', 'PATCH'].includes(request.method)) {\n    return true;\n  }\n\n  const token = request.headers.get('x-csrf-token');\n  if (!token) {\n    return false;\n  }\n\n  const supabase = createPlatformClient('hub');\n  const now = Math.floor(Date.now() / 1000);\n\n  // Clean up expired tokens\n  await supabase\n    .from('csrf_tokens')\n    .delete()\n    .lt('expires_at', now);\n\n  // Check if token exists and is valid\n  const { data: tokenData } = await supabase\n    .from('csrf_tokens')\n    .select('token')\n    .eq('token', token)\n    .gte('expires_at', now)\n    .single();\n\n  return !!tokenData;\n}\n\n// Store a new CSRF token\nexport async function storeCsrfToken(token: string): Promise<void> {\n  const supabase = createPlatformClient('hub');\n  const now = Math.floor(Date.now() / 1000);\n  \n  await supabase\n    .from('csrf_tokens')\n    .insert({\n      token,\n      expires_at: now + CSRF_TOKEN_VALIDITY\n    });\n}\n\nexport {\n  generateToken,\n  storeToken,\n  validateToken,\n  requiresCsrfCheck,\n  setCsrfCookie,\n  type CsrfConfig,\n};","import type { NextRequest } from 'next/server';\nimport type { NextResponse } from 'next/server';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { SecurityEvent, SecurityEventSeverity } from '../index';\nimport { PlatformSlug } from '@neothink/database';\n\n/**\n * Rate limiting configuration\n */\nexport interface RateLimitConfig {\n  windowMs: number;  // Time window in milliseconds\n  maxRequests: number;  // Maximum requests allowed in the window\n  message?: string;\n}\n\n/**\n * Default rate limits by endpoint type\n */\nconst DEFAULT_RATE_LIMIT: RateLimitConfig = {\n  windowMs: 60 * 1000,  // 1 minute\n  maxRequests: 60  // 60 requests per minute\n};\n\nconst AUTH_RATE_LIMIT: RateLimitConfig = {\n  windowMs: 15 * 60 * 1000,  // 15 minutes\n  maxRequests: 5  // 5 attempts per 15 minutes\n};\n\nasync function logRateLimitViolation(\n  supabase: SupabaseClient,\n  req: NextRequest,\n  details: Record<string, any>\n): Promise<void> {\n  const securityEvent: SecurityEvent = {\n    event: 'rate_limit_exceeded',\n    severity: 'medium',\n    platform_slug: req.headers.get('host') || 'unknown',\n    ip_address: req.headers.get('x-forwarded-for') || 'unknown',\n    request_path: req.nextUrl.pathname,\n    request_method: req.method,\n    request_headers: Object.fromEntries(req.headers),\n    context: {\n      path: req.nextUrl.pathname,\n      method: req.method,\n      ip: req.headers.get('x-forwarded-for') || 'unknown',\n    },\n    details,\n    suspicious_activity: true\n  };\n\n  await supabase.from('security_events').insert(securityEvent);\n}\n\nexport async function applyRateLimit(\n  req: NextRequest,\n  supabase: SupabaseClient,\n  config: RateLimitConfig\n): Promise<Response | null> {\n  const ip = req.headers.get('x-forwarded-for') || 'unknown';\n  const key = `rate_limit:${ip}:${req.nextUrl.pathname}`;\n  \n  // Get current count\n  const { data: rateData } = await supabase\n    .from('rate_limits')\n    .select('count, last_request')\n    .eq('key', key)\n    .single();\n    \n  const now = new Date();\n  const windowStart = new Date(now.getTime() - config.windowMs);\n  \n  if (rateData) {\n    const lastRequest = new Date(rateData.last_request);\n    \n    // Reset if outside window\n    if (lastRequest < windowStart) {\n      await supabase\n        .from('rate_limits')\n        .update({ count: 1, last_request: now.toISOString() })\n        .eq('key', key);\n      return null;\n    }\n    \n    // Increment count\n    if (rateData.count >= config.maxRequests) {\n      await logRateLimitViolation(supabase, req, {\n        ip,\n        count: rateData.count,\n        window_ms: config.windowMs,\n        max_requests: config.maxRequests\n      });\n      \n      return new Response(\n        JSON.stringify({ \n          error: config.message || 'Too many requests' \n        }),\n        { \n          status: 429,\n          headers: {\n            'Content-Type': 'application/json',\n            'Retry-After': Math.ceil((config.windowMs - (now.getTime() - lastRequest.getTime())) / 1000).toString()\n          }\n        }\n      );\n    }\n    \n    await supabase\n      .from('rate_limits')\n      .update({ \n        count: rateData.count + 1,\n        last_request: now.toISOString()\n      })\n      .eq('key', key);\n      \n  } else {\n    // First request\n    await supabase\n      .from('rate_limits')\n      .insert({\n        key,\n        count: 1,\n        last_request: now.toISOString()\n      });\n  }\n  \n  return null;\n}\n\n/**\n * Gets the appropriate rate limit config based on the request path\n */\nexport function getRateLimitConfig(path: string): RateLimitConfig {\n  // Use stricter limits for authentication endpoints\n  if (path.includes('/auth/') || path.includes('/login') || path.includes('/signup')) {\n    return AUTH_RATE_LIMIT;\n  }\n  return DEFAULT_RATE_LIMIT;\n}\n\n/**\n * Clean up expired rate limit records\n * \n * This should be called periodically (e.g., via a cron job) to clean up old records\n */\nexport async function cleanupRateLimits(supabase: SupabaseClient): Promise<void> {\n  const now = new Date();\n  const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n  \n  const { error } = await supabase\n    .from('rate_limits')\n    .delete()\n    .lt('window_start', oneDayAgo.toISOString());\n  \n  if (error) {\n    console.error('Failed to clean up rate limit records:', error);\n  }\n} ","/**\n * Security Testing Helpers\n * \n * This file contains utilities to help test the security features of the application.\n * DO NOT include this in production builds!\n */\n\nimport type { SecurityEvent, SecurityEventSeverity, SecurityEventType, SecurityLog, PlatformSlug } from '@neothink/database';\nimport { createPlatformClient } from '@neothink/database';\n\n/**\n * Get recent security logs for testing and development\n */\nexport async function getRecentSecurityLogs(\n  platformSlug: PlatformSlug = 'hub',\n  limit = 100\n) {\n  const supabase = createPlatformClient(platformSlug);\n  \n  const { data, error } = await supabase\n    .from('security_logs')\n    .select('*')\n    .order('created_at', { ascending: false })\n    .limit(limit);\n    \n  if (error) {\n    console.error('Failed to get security logs:', error);\n    return [];\n  }\n  \n  return data;\n}\n\n/**\n * Get rate limit records for testing\n */\nexport async function getRateLimitRecords(\n  identifier: string,\n  platformSlug: PlatformSlug = 'hub'\n) {\n  const supabase = createPlatformClient(platformSlug);\n  \n  const { data, error } = await supabase\n    .from('rate_limits')\n    .select('*')\n    .eq('identifier', identifier)\n    .order('created_at', { ascending: false });\n    \n  if (error) {\n    console.error('Failed to get rate limit records:', error);\n    return [];\n  }\n  \n  return data;\n}\n\n/**\n * Generate test security logs for development and testing\n */\nexport async function generateTestSecurityLogs(\n  count = 10,\n  platformSlug: PlatformSlug = 'hub'\n) {\n  if (process.env.NODE_ENV === 'production') {\n    console.error('Cannot generate test logs in production');\n    return;\n  }\n  \n  const supabase = createPlatformClient(platformSlug);\n  const severities: SecurityEventSeverity[] = ['low', 'medium', 'high', 'critical'];\n  const events = [\n    'login_attempt',\n    'login_success',\n    'login_failure',\n    'password_reset',\n    'suspicious_activity',\n    'rate_limit_exceeded',\n    'access_denied'\n  ];\n  \n  const ips = [\n    '192.168.1.1',\n    '10.0.0.1',\n    '172.16.0.1',\n    '127.0.0.1'\n  ];\n  \n  const logs = Array.from({ length: count }, () => ({\n    event: events[Math.floor(Math.random() * events.length)],\n    severity: severities[Math.floor(Math.random() * severities.length)],\n    platform_slug: platformSlug,\n    ip_address: ips[Math.floor(Math.random() * ips.length)],\n    user_agent: 'Testing Agent',\n    request_path: '/test/path',\n    context: { test: true },\n    details: { test: true }\n  }));\n  \n  const { error } = await supabase.from('security_logs').insert(logs);\n  \n  if (error) {\n    console.error('Failed to insert test logs:', error);\n    return;\n  }\n  \n  console.log(`Successfully inserted ${count} test security logs`);\n}\n\n/**\n * Clear test security logs (for cleanup)\n */\nexport async function clearTestSecurityLogs(platformSlug: PlatformSlug = 'hub') {\n  if (process.env.NODE_ENV === 'production') {\n    console.error('Cannot clear logs in production');\n    return;\n  }\n  \n  const supabase = createPlatformClient(platformSlug);\n  \n  const { error } = await supabase\n    .from('security_logs')\n    .delete()\n    .eq('context->test', 'true');\n    \n  if (error) {\n    console.error('Failed to clear test logs:', error);\n    return;\n  }\n  \n  console.log('Successfully cleared test security logs');\n} ","\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { createPlatformClient } from '@neothink/database';\nimport { SecurityLog, SecurityEventSeverity } from '@neothink/database';\n\n/**\n * Security Dashboard Component\n * \n * Displays recent security events with filtering options\n * This is an admin-only component and should be protected by authentication\n */\nexport default function SecurityDashboard({ platformSlug, limit = 100 }: { platformSlug: string; limit?: number }) {\n  const [logs, setLogs] = useState<SecurityLog[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [filter, setFilter] = useState<{\n    severity?: SecurityEventSeverity;\n    event?: string;\n    ip?: string;\n  }>({});\n\n  // Fetch security logs\n  useEffect(() => {\n    async function fetchLogs() {\n      setLoading(true);\n      setError(null);\n      \n      try {\n        const supabase = createPlatformClient(platformSlug as any);\n        \n        let query = supabase\n          .from('security_logs')\n          .select('*')\n          .order('created_at', { ascending: false })\n          .limit(limit);\n          \n        // Apply filters\n        if (filter.severity) {\n          query = query.eq('severity', filter.severity);\n        }\n        \n        if (filter.event) {\n          query = query.eq('event', filter.event);\n        }\n        \n        if (filter.ip) {\n          query = query.eq('ip_address', filter.ip);\n        }\n        \n        const { data, error } = await query;\n        \n        if (error) {\n          throw error;\n        }\n        \n        setLogs(data || []);\n      } catch (err: any) {\n        setError(err.message || 'Failed to fetch security logs');\n        console.error('Error fetching security logs:', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    fetchLogs();\n  }, [platformSlug, limit, filter]);\n  \n  // Get unique event types for filter\n  const eventTypes = [...new Set(logs.map(log => log.event))];\n  \n  // Get unique IP addresses for filter\n  const ipAddresses = [...new Set(logs.map(log => log.ip_address).filter(Boolean))];\n\n  return (\n    <div className=\"w-full p-4 bg-white rounded-lg shadow\">\n      <h1 className=\"text-2xl font-bold mb-4\">Security Dashboard</h1>\n      \n      {/* Filters */}\n      <div className=\"mb-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Severity\n          </label>\n          <select\n            className=\"w-full p-2 border border-gray-300 rounded\"\n            value={filter.severity || ''}\n            onChange={(e) => setFilter(prev => ({\n              ...prev,\n              severity: e.target.value as SecurityEventSeverity || undefined\n            }))}\n          >\n            <option value=\"\">All Severities</option>\n            <option value=\"low\">Low</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"high\">High</option>\n            <option value=\"critical\">Critical</option>\n          </select>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Event Type\n          </label>\n          <select\n            className=\"w-full p-2 border border-gray-300 rounded\"\n            value={filter.event || ''}\n            onChange={(e) => setFilter(prev => ({\n              ...prev,\n              event: e.target.value || undefined\n            }))}\n          >\n            <option value=\"\">All Events</option>\n            {eventTypes.map(type => (\n              <option key={type} value={type}>{type}</option>\n            ))}\n          </select>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            IP Address\n          </label>\n          <select\n            className=\"w-full p-2 border border-gray-300 rounded\"\n            value={filter.ip || ''}\n            onChange={(e) => setFilter(prev => ({\n              ...prev,\n              ip: e.target.value || undefined\n            }))}\n          >\n            <option value=\"\">All IP Addresses</option>\n            {ipAddresses.map(ip => ip && (\n              <option key={ip} value={ip}>{ip}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n      \n      {/* Loading and error states */}\n      {loading && <div className=\"text-center py-4\">Loading security logs...</div>}\n      {error && <div className=\"bg-red-100 text-red-700 p-4 rounded mb-4\">{error}</div>}\n      \n      {/* Results table */}\n      {!loading && !error && (\n        <>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Time</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Event</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Severity</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">IP Address</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Path</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Details</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {logs.length === 0 ? (\n                  <tr>\n                    <td colSpan={6} className=\"px-6 py-4 text-center text-sm text-gray-500\">\n                      No security logs found matching the current filters.\n                    </td>\n                  </tr>\n                ) : (\n                  logs.map((log) => (\n                    <tr key={log.id}>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {new Date(log.created_at).toLocaleString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {log.event}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full \n                          ${log.severity === 'critical' ? 'bg-red-100 text-red-800' : \n                          log.severity === 'high' ? 'bg-orange-100 text-orange-800' :\n                          log.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                          'bg-green-100 text-green-800'}`}>\n                          {log.severity}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {log.ip_address}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 truncate max-w-xs\">\n                        {log.request_path}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        <button\n                          onClick={() => alert(JSON.stringify({ context: log.context, details: log.details }, null, 2))}\n                          className=\"text-indigo-600 hover:text-indigo-900\"\n                        >\n                          View Details\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n          \n          <div className=\"mt-4 text-sm text-gray-500\">\n            Showing {logs.length} of {logs.length} results\n          </div>\n        </>\n      )}\n    </div>\n  );\n} ","'use client';\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { createPlatformClient } from '@neothink/database';\nimport type { PlatformSlug } from '@neothink/database';\n// DEPRECATED: Use PlatformSlug from @neothink/database instead\nimport { logSecurityEvent, SecurityEventTypes } from '../utils/securityLogging';\n\n// Types\ninterface SecurityContextType {\n  // CSRF token management\n  csrfToken: string;\n  refreshCsrfToken: () => Promise<string>;\n  \n  // Client-side security logging\n  logSecurityEvent: (event: string, severity: 'low' | 'medium' | 'high' | 'critical', details?: Record<string, any>) => Promise<void>;\n  \n  // Security state\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface SecurityProviderProps {\n  platformSlug: PlatformSlug;\n  children: ReactNode;\n}\n\n// Create context\nconst SecurityContext = createContext<SecurityContextType | null>(null);\n\n/**\n * Hook to use security features\n */\nexport function useSecurityProvider() {\n  const context = useContext(SecurityContext);\n  if (!context) {\n    throw new Error('useSecurityProvider must be used within a SecurityProvider');\n  }\n  return context;\n}\n\n/**\n * Security Provider Component\n * \n * Provides security context to the application\n */\nexport function SecurityProvider({ platformSlug, children }: SecurityProviderProps) {\n  const [csrfToken, setCsrfToken] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Initialize on mount\n  useEffect(() => {\n    async function initialize() {\n      try {\n        await refreshCsrfToken();\n        setIsLoading(false);\n      } catch (err: any) {\n        setError(err.message || 'Failed to initialize security provider');\n        setIsLoading(false);\n      }\n    }\n\n    initialize();\n    \n    // Set up CSRF token refresh timer (every 15 minutes)\n    const refreshTimer = setInterval(() => {\n      refreshCsrfToken();\n    }, 15 * 60 * 1000);\n    \n    return () => clearInterval(refreshTimer);\n  }, [platformSlug]);\n\n  /**\n   * Generate a new CSRF token\n   */\n  async function refreshCsrfToken(): Promise<string> {\n    try {\n      // Generate a random token\n      const randomBytes = new Uint8Array(32);\n      window.crypto.getRandomValues(randomBytes);\n      const token = Array.from(randomBytes)\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n      \n      // Store in state and sessionStorage\n      setCsrfToken(token);\n      sessionStorage.setItem('csrf-token', token);\n      \n      return token;\n    } catch (err: any) {\n      setError('Failed to generate CSRF token');\n      throw err;\n    }\n  }\n\n  /**\n   * Log a security event from the client side\n   */\n  async function logClientSideSecurityEvent(\n    event: string,\n    severity: 'low' | 'medium' | 'high' | 'critical',\n    details?: Record<string, any>\n  ): Promise<void> {\n    try {\n      const supabase = createPlatformClient(platformSlug as any);\n      \n      await logSecurityEvent(supabase, {\n        type: event,\n        severity,\n        userId: undefined, // Optionally set if available\n        context: {\n          url: window.location.href,\n          referrer: document.referrer,\n        },\n        details: details || {}\n      });\n    } catch (err) {\n      console.error('Failed to log security event:', err);\n    }\n  }\n\n  // Context value\n  const value: SecurityContextType = {\n    csrfToken,\n    refreshCsrfToken,\n    logSecurityEvent: logClientSideSecurityEvent,\n    isLoading,\n    error\n  };\n\n  return (\n    <SecurityContext.Provider value={value}>\n      {children}\n    </SecurityContext.Provider>\n  );\n}\n\n/**\n * CSRF Token Provider\n * \n * Higher-order component to add CSRF tokens to fetch requests automatically\n */\nexport function withCsrfProtection<T extends Record<string, any>>(\n  Component: React.ComponentType<T>\n): React.FC<T> {\n  const WithCsrfProtection: React.FC<T> = (props) => {\n    const { csrfToken } = useSecurityProvider();\n    \n    // Override fetch to include CSRF token automatically\n    useEffect(() => {\n      const originalFetch = window.fetch;\n      \n      window.fetch = async function(input, init) {\n        // Only add CSRF token for same-origin POST/PUT/DELETE/PATCH requests\n        if (init && ['POST', 'PUT', 'DELETE', 'PATCH'].includes(init.method || '')) {\n          // Handle URL string or Request object\n          const url = typeof input === 'string' ? new URL(input, window.location.origin) : \n                    (input instanceof Request ? new URL(input.url) : input);\n          \n          // Check if same origin\n          if (\n            (typeof input === 'string' && input.startsWith('/')) || \n            (url instanceof URL && url.origin === window.location.origin)\n          ) {\n            // Clone and modify the init object to include CSRF token\n            init = {\n              ...init,\n              headers: {\n                ...init.headers,\n                'X-CSRF-Token': csrfToken,\n              },\n            };\n          }\n        }\n        \n        return originalFetch.call(window, input, init);\n      };\n      \n      // Restore original fetch on unmount\n      return () => {\n        window.fetch = originalFetch;\n      };\n    }, [csrfToken]);\n    \n    return <Component {...props} />;\n  };\n  \n  return WithCsrfProtection;\n}","import { FormEvent, ReactNode } from 'react'\n\ninterface AuthFormProps {\n  onSubmit: (e: FormEvent<HTMLFormElement>) => void;\n  loading: boolean;\n  error?: string | null;\n  submitted?: boolean;\n  children: ReactNode;\n}\n\nexport function AuthForm({ onSubmit, loading, error, submitted, children }: AuthFormProps) {\n  return (\n    <form onSubmit={onSubmit} className=\"space-y-4\">\n      {error && <div className=\"text-red-600\">{error}</div>}\n      {submitted && <div className=\"text-green-600\">Check your email for instructions.</div>}\n      {children}\n    </form>\n  )\n}","\"use client\";\n\nimport { FormEvent, useState } from 'react'\nimport { createPlatformClient } from '../lib/supabase/client'\nimport { AuthForm } from './AuthForm'\n\nexport function SignInForm() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<string | undefined>(undefined)\n  const [loading, setLoading] = useState(false)\n\n  async function handleSubmit(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    setError(undefined)\n    setLoading(true)\n\n    try {\n      const supabase = createPlatformClient()\n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n\n      if (error) {\n        setError(error.message)\n        return\n      }\n\n      // Redirect handled by middleware\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <AuthForm onSubmit={handleSubmit} error={error} loading={loading}>\n      <div>\n        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n          Email\n        </label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2\"\n        />\n      </div>\n      <div>\n        <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n          Password\n        </label>\n        <input\n          id=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2\"\n        />\n      </div>\n      <button\n        type=\"submit\"\n        disabled={loading}\n        className=\"w-full bg-black text-white rounded-md py-2 px-4 hover:bg-gray-800 disabled:opacity-50\"\n      >\n        Sign In\n      </button>\n    </AuthForm>\n  )\n} ","// Use createClient from @neothink/database for platform-aware clients\nimport { createClient } from '@neothink/database';\n\n// Helper to get Supabase URL and Key from env\nfunction getSupabaseEnv() {\n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;\n  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n  if (!url || !key) throw new Error('Missing Supabase env vars');\n  return { url, key };\n}\n\n// Platform-aware client factory (no extra options, as SupabaseClientOptions does not accept platformSlug)\nexport function createPlatformClient() {\n  const { url, key } = getSupabaseEnv();\n  return createClient(url, key);\n}\n\n// Default export for backward compatibility (if needed)\nexport { createClient };","\"use client\";\n\nimport { FormEvent, useState } from 'react'\nimport { createPlatformClient } from '../lib/supabase/client'\nimport { AuthForm } from './AuthForm'\n\nexport function SignUpForm() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<string | undefined>(undefined)\n  const [loading, setLoading] = useState(false)\n\n  async function handleSubmit(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    setError(undefined)\n    setLoading(true)\n\n    try {\n      const supabase = createPlatformClient()\n      const { error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: `${window.location.origin}/auth/confirm`\n        }\n      })\n\n      if (error) {\n        setError(error.message)\n        return\n      }\n\n      // Show success message\n      window.location.href = '/auth/signupconfirm'\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <AuthForm onSubmit={handleSubmit} error={error} loading={loading}>\n      <div>\n        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n          Email\n        </label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2\"\n        />\n      </div>\n      <div>\n        <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n          Password\n        </label>\n        <input\n          id=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n          minLength={8}\n          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2\"\n        />\n      </div>\n      <button\n        type=\"submit\"\n        disabled={loading}\n        className=\"w-full bg-black text-white rounded-md py-2 px-4 hover:bg-gray-800 disabled:opacity-50\"\n      >\n        Create Account\n      </button>\n    </AuthForm>\n  )\n}","\"use client\";\n\nimport { FormEvent, useState } from 'react'\nimport { createPlatformClient } from '../lib/supabase/client'\nimport { AuthForm } from './AuthForm'\n\nexport function ForgotPasswordForm() {\n  const [email, setEmail] = useState('')\n  const [error, setError] = useState<string | undefined>(undefined)\n  const [loading, setLoading] = useState(false)\n  const [submitted, setSubmitted] = useState(false)\n\n  async function handleSubmit(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    setError(undefined)\n    setLoading(true)\n\n    try {\n      const supabase = createPlatformClient()\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/auth/update`,\n      })\n\n      if (error) {\n        setError(error.message)\n        return\n      }\n\n      setSubmitted(true)\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (submitted) {\n    return (\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Check your email</h3>\n        <p className=\"mt-2 text-sm text-gray-600\">\n          We've sent you a password reset link. Please check your email.\n        </p>\n        <div className=\"mt-6\">\n          <a href=\"/auth/login\" className=\"text-black hover:text-gray-800\">\n            Return to login\n          </a>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <AuthForm onSubmit={handleSubmit} error={error} loading={loading}>\n      <div>\n        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n          Email address\n        </label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2\"\n        />\n      </div>\n      <button\n        type=\"submit\"\n        disabled={loading}\n        className=\"w-full bg-black text-white rounded-md py-2 px-4 hover:bg-gray-800 disabled:opacity-50\"\n      >\n        Reset Password\n      </button>\n    </AuthForm>\n  )\n}","\"use client\";\n\nimport { FormEvent, useState } from 'react'\nimport { createPlatformClient } from '../lib/supabase/client'\nimport { AuthForm } from './AuthForm'\n\nexport function UpdatePasswordForm() {\n  const [password, setPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n  const [error, setError] = useState<string | undefined>(undefined)\n  const [loading, setLoading] = useState(false)\n\n  async function handleSubmit(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    setError(undefined)\n    setLoading(true)\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const supabase = createPlatformClient()\n      const { error } = await supabase.auth.updateUser({\n        password: password\n      })\n\n      if (error) {\n        setError(error.message)\n        return\n      }\n\n      // Redirect to dashboard on success\n      window.location.href = '/'\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <AuthForm onSubmit={handleSubmit} error={error} loading={loading}>\n      <div>\n        <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n          New Password\n        </label>\n        <input\n          id=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n          minLength={8}\n          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2\"\n        />\n      </div>\n      <div>\n        <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n          Confirm Password\n        </label>\n        <input\n          id=\"confirmPassword\"\n          type=\"password\"\n          value={confirmPassword}\n          onChange={(e) => setConfirmPassword(e.target.value)}\n          required\n          minLength={8}\n          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2\"\n        />\n      </div>\n      <button\n        type=\"submit\"\n        disabled={loading}\n        className=\"w-full bg-black text-white rounded-md py-2 px-4 hover:bg-gray-800 disabled:opacity-50\"\n      >\n        Update Password\n      </button>\n    </AuthForm>\n  )\n}","\"use client\";\n\nimport { useSearchParams } from 'next/navigation'\n\nexport function ErrorPage() {\n  const searchParams = useSearchParams()\n  const error = searchParams.get('error') || 'An error occurred'\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Authentication Error\n          </h2>\n          <div className=\"mt-2 text-center text-sm text-gray-600\">\n            {error}\n          </div>\n          <div className=\"mt-6 text-center\">\n            <a\n              href=\"/auth/login\"\n              className=\"text-black hover:text-gray-800\"\n            >\n              Return to login\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n} ","/**\n * @neothink/auth\n * Enhanced security features for Neothink applications\n */\n\n// Export all types and functions\nimport middleware, { getPlatformFromHost } from './utils/middleware';\nimport type { SecurityEvent, SecurityEventSeverity, SecurityEventType, SecurityLog, PlatformSlug } from '@neothink/database';\n\n// Export security logging utilities\nimport { \n  logSecurityEvent, \n  SecurityEventTypes\n} from './utils/securityLogging';\n\n// Export rate limiting utilities\nimport { \n  applyRateLimit,\n  cleanupRateLimits \n} from './utils/rateLimit';\n\n// Export testing helpers (only in development)\nimport {\n  getRecentSecurityLogs,\n  getRateLimitRecords,\n  generateTestSecurityLogs,\n  clearTestSecurityLogs\n} from './utils/securityTestingHelpers';\n\n// Export client-side components\nimport SecurityDashboard from './components/SecurityDashboard';\nimport { \n  SecurityProvider, \n  useSecurityProvider,\n  withCsrfProtection\n} from './hooks/useSecurityProvider';\n\n// Main exports\nexport {\n  // Middleware\n  middleware,\n  getPlatformFromHost,\n  \n  // Security logging\n  logSecurityEvent,\n  SecurityEventTypes,\n  \n  // Rate limiting\n  applyRateLimit,\n  cleanupRateLimits,\n  \n  // Types\n  type SecurityEvent,\n  type SecurityEventSeverity,\n  \n  // Testing helpers (development only)\n  getRecentSecurityLogs,\n  getRateLimitRecords,\n  generateTestSecurityLogs,\n  clearTestSecurityLogs,\n  \n  // Client components\n  SecurityDashboard,\n  SecurityProvider,\n  useSecurityProvider,\n  withCsrfProtection\n};\n\n// Conditional exports for different environments\nif (process.env.NODE_ENV !== 'production') {\n  // Development-only exports\n  // (nothing additional yet)\n}\n\n// Components\nexport * from './components/AuthForm'\nexport * from './components/SignInForm'\nexport * from './components/SignUpForm'\nexport * from './components/ForgotPasswordForm'\nexport * from './components/UpdatePasswordForm'\nexport * from './components/ErrorPage'\n\n// Supabase\nexport * from './lib/supabase/client'\n"],"mappings":"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","names":["createPlatformClient","logSecurityEvent","createPlatformClient","createPlatformClient","createPlatformClient","error","useState","useEffect","createPlatformClient","jsx","useState","useEffect","createPlatformClient","logSecurityEvent","jsx","jsxs","useState","createPlatformClient","jsx","jsxs","useState","createPlatformClient","error","useState","jsx","jsxs","useState","createPlatformClient","error","useState","jsx","jsxs","useState","createPlatformClient","error","useState","jsx","jsxs","useState","createPlatformClient","error","jsx","jsxs"]}