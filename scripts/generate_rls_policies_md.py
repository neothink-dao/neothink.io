import psycopg2
import os

# --- CONFIGURATION ---
DB_URL = os.getenv("DATABASE_URL")  # Set this in your environment or .env file
OUTPUT_FILE = "docs/security/rls-policies.md"

HEADER = """# Supabase Row Level Security (RLS) Policies

This document is auto-generated. It tracks all RLS policies implemented in the Neothink Supabase database. Keeping this up to date is critical for security audits, onboarding, and ongoing development.

## Policy Table

| Table         | Policy Name         | Action   | Policy Expression         | Purpose/Notes                |
|--------------|--------------------|----------|--------------------------|------------------------------|
"""

FOOTER = """
*This table is auto-generated. See Supabase dashboard or migrations for details.*

## RLS Audit & Testing Checklist
- [ ] All tables with sensitive data have RLS enabled
- [ ] No overly permissive ("allow all") policies exist
- [ ] Policies are tested with integration tests for unauthorized access
- [ ] Policy documentation is kept up to date with schema changes
- [ ] RLS policies are reviewed during code reviews and migrations

## References
- [Supabase RLS Documentation](https://supabase.com/docs/guides/auth/row-level-security)
- [Neothink Schema Documentation](../database/schema_documentation.md)
"""

def get_purpose_hint(policy_name, table):
    # You can expand this mapping for more descriptive notes
    hints = {
        "read": "Allows users to read their own records",
        "insert": "Allows users to insert their own records",
        "update": "Allows users to update their own records",
        "delete": "Allows users to delete their own records",
        "all": "Full access as defined by policy",
        "admin": "Admin-level access",
        "own": "Restricts access to user's own data",
        "public": "Accessible to all users",
    }
    for key, hint in hints.items():
        if key in policy_name.lower():
            return hint
    return f"See migration SQL or Supabase dashboard for details"

def main():
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()

    # Get all tables with RLS policies
    cur.execute("""
        SELECT n.nspname, c.relname
        FROM pg_class c
        JOIN pg_namespace n ON n.oid = c.relnamespace
        WHERE c.relkind = 'r'
        AND EXISTS (SELECT 1 FROM pg_policy p WHERE p.polrelid = c.oid)
        ORDER BY n.nspname, c.relname;
    """)
    tables = cur.fetchall()

    rows = []
    for schema, table in tables:
        cur.execute("""
            SELECT polname, polcmd, polroles, polqual, polwithcheck
            FROM pg_policy
            WHERE polrelid = %s::regclass
        """, (f"{schema}.{table}",))
        policies = cur.fetchall()
        for polname, polcmd, polroles, polqual, polwithcheck in policies:
            # Map command code to action
            action_map = {"r": "SELECT", "a": "INSERT", "w": "UPDATE", "d": "DELETE", "*": "ALL"}
            action = action_map.get(polcmd, polcmd)
            # Policy expression is not always human-readable
            expr = "See migration SQL or Supabase dashboard"
            # Purpose/Notes: try to infer, otherwise generic
            purpose = get_purpose_hint(polname, table)
            rows.append(f"| `{table}` | \"{polname}\" | {action} | {expr} | {purpose} |")

    # Write the file
    with open(OUTPUT_FILE, "w") as f:
        f.write(HEADER)
        for row in rows:
            f.write(row + "\n")
        f.write("| ...           | ...                | ...      | ...                      | ...                          |\n")
        f.write(FOOTER)

    # --- NEW: Output tables missing RLS ---
    cur.execute("""
        SELECT n.nspname, c.relname
        FROM pg_class c
        JOIN pg_namespace n ON n.oid = c.relnamespace
        WHERE c.relkind = 'r'
          AND n.nspname NOT IN ('pg_catalog', 'information_schema')
          AND NOT EXISTS (SELECT 1 FROM pg_policy p WHERE p.polrelid = c.oid)
        ORDER BY n.nspname, c.relname;
    """)
    missing_rls = cur.fetchall()
    with open("docs/security/rls-missing.md", "w") as f:
        f.write("# Tables Missing RLS Policies\n\n")
        if not missing_rls:
            f.write("All tables have at least one RLS policy.\n")
        else:
            f.write("The following tables do not have any RLS policies defined. Review and add RLS if they contain sensitive or user-specific data.\n\n")
            for schema, table in missing_rls:
                f.write(f"- `{schema}.{table}`\n")
        f.write("\n---\n\n*Generated by generate_rls_policies_md.py*\n")
    print("RLS policy documentation and missing RLS audit written.")

if __name__ == "__main__":
    main() 