{
  "version": "1.0.0",
  "lastUpdated": "2023-04-15T08:30:00Z",
  "projectInfo": {
    "name": "Neothink Platforms",
    "description": "Monorepo for Neothink platform applications including go.neothink.io, www.joinascenders.org, www.joinneothinkers.org, and www.joinimmortals.org",
    "architecture": "Next.js monorepo with Supabase backend and TailwindCSS styling",
    "repositoryStructure": {
      "apps": [
        {
          "name": "go.neothink.io",
          "description": "Central hub for Neothink platforms"
        },
        {
          "name": "joinascenders",
          "description": "Ascender platform focused on business prosperity"
        },
        {
          "name": "joinneothinkers",
          "description": "Neothinker platform focused on personal happiness"
        },
        {
          "name": "joinimmortals",
          "description": "Immortals platform"
        }
      ],
      "shared": {
        "description": "Shared components, hooks, and utilities",
        "components": "UI components used across platforms",
        "hooks": "React hooks for global functionality",
        "utils": "Utility functions for common operations"
      },
      "lib": {
        "description": "Core libraries and functionality",
        "auth": "Authentication utilities and components",
        "database": "Database schemas and queries",
        "theme": "Theming system for platform customization",
        "analytics": "Analytics integration and tracking"
      },
      "types": {
        "description": "TypeScript type definitions"
      },
      "supabase": {
        "description": "Supabase database migrations and configuration"
      },
      "docs": {
        "description": "Documentation for the platforms and architecture"
      }
    }
  },
  "contextMap": {
    "platforms": [
      {
        "name": "Ascender",
        "slug": "ascenders",
        "description": "Platform focused on business growth and prosperity",
        "core_purpose": "Enable value creators to achieve unprecedented levels of prosperity through systematic business growth and value creation",
        "components": [
          "Ascension System",
          "FLOW Framework",
          "Ascenders Community"
        ],
        "pricing": "$197/month",
        "url": "https://www.joinascenders.org"
      },
      {
        "name": "Neothinker",
        "slug": "neothinkers",
        "description": "Platform focused on personal growth and happiness",
        "core_purpose": "Enable individuals to achieve unprecedented levels of happiness through integrated personal development and value creation",
        "components": [
          "Neothink University",
          "Mark Hamilton's Vision",
          "Neothinkers Community"
        ],
        "pricing": "$197/month",
        "url": "https://www.joinneothinkers.org"
      },
      {
        "name": "Immortals",
        "slug": "immortals",
        "description": "Premium platform for advanced members",
        "url": "https://www.joinimmortals.org"
      }
    ],
    "database": {
      "schema": {
        "core": [
          "profiles",
          "platform_access"
        ],
        "auth": [
          "tenant_roles",
          "role_capabilities",
          "permissions",
          "role_permissions"
        ],
        "content": [
          "content_modules",
          "content_versions",
          "content_workflow"
        ],
        "learning": [
          "concepts",
          "learning_paths",
          "learning_progress"
        ],
        "communication": [
          "chat_rooms",
          "messages",
          "discussion_topics"
        ],
        "analytics": [
          "analytics_metrics",
          "analytics_reports",
          "analytics_summaries"
        ],
        "health": [
          "health_metrics",
          "health_integrations",
          "vital_signs"
        ],
        "config": [
          "feature_flags",
          "platform_settings",
          "platform_customization"
        ]
      },
      "relationships": [
        {
          "from": "profiles",
          "to": "platform_access",
          "type": "one-to-many",
          "description": "User can access multiple platforms"
        },
        {
          "from": "tenant_roles",
          "to": "role_capabilities",
          "type": "one-to-many",
          "description": "Roles have multiple capabilities"
        },
        {
          "from": "tenant_roles",
          "to": "role_permissions",
          "type": "one-to-many",
          "description": "Roles have multiple permissions"
        },
        {
          "from": "content_modules",
          "to": "content_versions",
          "type": "one-to-many",
          "description": "Content modules have multiple versions"
        },
        {
          "from": "learning_paths",
          "to": "learning_progress",
          "type": "one-to-many",
          "description": "Learning paths track user progress"
        },
        {
          "from": "chat_rooms",
          "to": "messages",
          "type": "one-to-many",
          "description": "Chat rooms contain multiple messages"
        }
      ]
    },
    "keyFeatures": [
      {
        "name": "Multi-platform Authentication",
        "description": "Unified authentication system with platform-specific access control",
        "components": ["auth", "profiles", "platform_access"],
        "implementation": "Supabase Auth with custom RBAC system"
      },
      {
        "name": "Role-Based Access Control",
        "description": "Granular permission system with tenant isolation",
        "components": ["tenant_roles", "role_capabilities", "permissions"],
        "implementation": "Custom RBAC with Supabase RLS policies"
      },
      {
        "name": "Content Management",
        "description": "Versioned content management with workflow",
        "components": ["content_modules", "content_versions", "content_workflow"],
        "implementation": "Custom CMS with approval workflows"
      },
      {
        "name": "Learning System",
        "description": "Structured learning paths with progress tracking",
        "components": ["concepts", "learning_paths", "learning_progress"],
        "implementation": "Modular learning system with prerequisites"
      },
      {
        "name": "Community Features",
        "description": "Discussion forums and messaging",
        "components": ["chat_rooms", "messages", "discussion_topics"],
        "implementation": "Real-time messaging with Supabase"
      },
      {
        "name": "Analytics",
        "description": "Comprehensive analytics system",
        "components": ["analytics_metrics", "analytics_reports", "analytics_summaries"],
        "implementation": "Custom analytics with reporting"
      },
      {
        "name": "Health Tracking",
        "description": "Health metrics and integration with external providers",
        "components": ["health_metrics", "health_integrations", "vital_signs"],
        "implementation": "External API integration with data storage"
      },
      {
        "name": "Platform Configuration",
        "description": "Configurable platform settings and feature flags",
        "components": ["feature_flags", "platform_settings", "platform_customization"],
        "implementation": "Dynamic configuration system"
      }
    ],
    "codeNamingConventions": {
      "components": "PascalCase.tsx",
      "hooks": "use[Name].ts",
      "utils": "camelCase.ts",
      "types": "PascalCase.d.ts",
      "database": "snake_case.sql",
      "constants": "UPPER_SNAKE_CASE"
    },
    "techStack": {
      "frontend": [
        "Next.js 15+",
        "React 18+",
        "TailwindCSS",
        "Radix UI",
        "Framer Motion"
      ],
      "backend": [
        "Supabase",
        "PostgreSQL",
        "Edge Functions"
      ],
      "infrastructure": [
        "Vercel",
        "Supabase"
      ],
      "testing": [
        "Jest",
        "React Testing Library"
      ],
      "tools": [
        "TypeScript",
        "Turbo",
        "ESLint",
        "Prettier"
      ]
    },
    "aiDocumentationMarkers": {
      "components": [
        "@component",
        "@description",
        "@props",
        "@example",
        "@related"
      ],
      "database": [
        "@table",
        "@column",
        "@relationships",
        "@security"
      ],
      "functions": [
        "@function",
        "@param",
        "@returns",
        "@throws",
        "@example"
      ]
    },
    "fileOrganization": {
      "components": "Standard React component structure with index.ts exports",
      "hooks": "Custom hooks with clear input/output documentation",
      "apis": "API routes organized by feature domain",
      "database": "Migrations with sequential numbering and description"
    }
  },
  "aiHints": {
    "projectSpecificTerms": {
      "Ascender": "Business-focused platform user",
      "Neothinker": "Personal growth platform user",
      "Immortal": "Premium platform user",
      "Guardian": "Community moderator role",
      "FLOW": "Framework for business process optimization",
      "Neothink": "Parent brand and philosophy",
      "Tenant": "Platform or sub-platform instance"
    },
    "bestPractices": [
      "Use platform-specific theming from lib/theme",
      "Leverage shared components from shared/ directory",
      "Follow RBAC patterns for access control",
      "Use Supabase client from lib/supabase for database access",
      "Implement proper error handling with custom Error components",
      "Follow existing component patterns for consistency"
    ],
    "commonIssues": [
      "Ensure proper role checking for protected routes",
      "Verify platform access before showing platform-specific content",
      "Handle authentication state properly with SSR considerations",
      "Use proper TypeScript types from generated Supabase types"
    ]
  },
  "aiTools": {
    "documentation": {
      "annotationGuide": "docs/ai-annotation-guide.md",
      "integrationGuide": "docs/ai-tools-integration.md"
    },
    "validator": {
      "script": "scripts/ai-validator.js",
      "npm": {
        "validate": "npm run ai:validate",
        "updateContext": "npm run ai:update-context"
      },
      "requiredTags": {
        "components": ["@component", "@description", "@ai-context", "@props", "@related"],
        "database": ["@table", "@description", "@ai-context", "@columns", "@relationships", "@security"],
        "functions": ["@function", "@description", "@ai-context", "@param", "@returns", "@related"],
        "relationships": ["@relationship", "@description", "@ai-context", "@implementation"]
      }
    },
    "examples": {
      "component": "shared/components/examples/AIAnnotatedComponent.tsx"
    },
    "recommendedPrompts": {
      "cursor": [
        "Explain how [component] works and relates to [other component]",
        "Show me the data flow between [component] and [database table]",
        "How is [feature] implemented across the platforms?",
        "What's the best way to implement [new feature] following existing patterns?"
      ],
      "grok": [
        "DeepSearch: Map all components related to [feature]",
        "DeepSearch: Analyze the database schema relationships",
        "DeepSearch: Show me how [feature] is implemented across platforms",
        "DeepSearch: What's the architecture of the [system] component?"
      ]
    }
  }
} 