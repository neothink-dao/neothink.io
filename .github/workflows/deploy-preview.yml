name: Vercel Preview Deployment

on:
  pull_request:
    branches: [main]

# Prevent multiple workflows from running at the same time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Cache pnpm modules
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Cache Turborepo
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Lint
        run: pnpm lint
      
      - name: Type check
        run: pnpm type-check
      
      - name: Generate and validate Supabase types
        run: |
          pnpm gen:types
          pnpm gen:types:check
          
      - name: Run tests for shared packages
        run: pnpm test --filter="@neothink/*"
      
      - name: Run tests for all platforms
        run: |
          pnpm test --filter="apps/hub"
          pnpm test --filter="apps/ascenders"
          pnpm test --filter="apps/neothinkers"
          pnpm test --filter="apps/immortals"

  deploy-preview:
    name: Deploy Preview
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: preview
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Install dependencies
        run: npm ci

      - name: Run tests to validate functionality
        run: npm run test

      - name: Validate analytics and progress tracking
        run: |
          echo "Validating analytics events..."
          npm run test:analytics
          
          echo "Validating user progress system..."
          npm run test:user-progress
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
      
      - name: Test deployed preview
        run: |
          echo "Testing the preview deployment at ${{ steps.deploy.outputs.deployment_url }}"
          
          # Test hub accessibility
          curl -s "${{ steps.deploy.outputs.deployment_url }}" | grep -q "Neothink"
          
          # Test for presence of analytics scripts
          curl -s "${{ steps.deploy.outputs.deployment_url }}" | grep -q "analytics"
          
          # Test for Supabase initialization
          curl -s "${{ steps.deploy.outputs.deployment_url }}" | grep -q "supabase"
      
      - name: Create Deployment Comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body: `âœ… Preview deployed successfully! [Preview URL](${{ steps.deploy.outputs.deployment_url }})\n\n**Features verified**:\n- User progression system\n- Analytics tracking\n- Feature unlocking based on progress`
            }); 